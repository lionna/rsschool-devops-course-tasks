name: Terraform Workflow

# Trigger the workflow on pushes and pull requests to the 'main' branch
on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

# Set environment variables for AWS region and Terraform version using GitHub secrets
env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  TERRAFORM_VERSION: ${{ secrets.TERRAFORM_VERSION }}

# Define the permissions for GitHub Actions, specifically enabling OIDC token and content read access
permissions:
  id-token: write
  contents: read

# Define the Terraform job
jobs:
  Terraform:
    runs-on: ubuntu-latest
    steps:
    # Step 1: Check out the repository so the code is available for Terraform
    - name: Checkout repository
      uses: actions/checkout@v4

    # Step 2: Configure AWS credentials from an assumed role using OIDC
    # This step allows GitHub Actions to authenticate to AWS without storing long-term credentials
    - name: Configure AWS credentials from assumed role
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
        role-session-name: GitHub_to_AWS_via_OIDC
        aws-region: ${{ env.AWS_REGION }}

    # Step 3: Verify that the GitHub Action has AWS access using STS
    - name: Sts GetCallerIdentity (Verify AWS Access)
      run: aws sts get-caller-identity

    # Step 4: Install the specified version of Terraform
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: ${{ env.TERRAFORM_VERSION }}

    # Step 5: Initialize Terraform configuration (ensure plugins and modules are downloaded)
    - name: Terraform Init
      run: terraform init
      working-directory: ./task2

    # Step 6: Run Terraform Plan to preview infrastructure changes
    - name: Terraform Plan
      run: terraform plan
      working-directory: ./task2

    # Step 7: Apply Terraform configuration (auto-approve to avoid interactive prompts)
    - name: Terraform Apply
      run: terraform apply -auto-approve
      working-directory: ./task2

    # Step 8: Optionally destroy Terraform-managed infrastructure after testing (on-demand)
    # To trigger destruction, manually run this workflow and specify a destroy option.
    - name: Terraform Destroy
      run: terraform destroy -auto-approve
      working-directory: ./task2
